# NetMgr API 接口文档
## 概述
NetMgr是一个网络设备管理系统，提供用户认证和设备管理功能。本文档详细描述了系统提供的所有API接口，供前端工程师集成使用。

## 认证接口
### 1. 用户注册
- URL : POST /api/v1/auth/register
- 方法 : POST
- 请求体 :
  ```
  {
    "username": "string", // 最大50字符
    "email": "string",    // 有效的邮箱地址，
    最大100字符
    "password": "string"  // 最小6字符
  }
  ```
- 响应 :
  ```
  {
    "id": 1,
    "username": "string",
    "email": "string",
    "is_active": true,
    "is_admin": false,
    "created_at": "2023-01-01T00:00:00",
    "last_login": null
  }
  ```
- 状态码 :
  - 201: 注册成功
  - 400: 用户名已存在或邮箱已被使用
  - 500: 服务器内部错误
### 2. 用户登录
- URL : POST /api/v1/auth/login
- 方法 : POST
- 请求体 : 表单数据
  - username: string
  - password: string
- 响应 :
  ```
  {
    "access_token": "string",
    "token_type": "bearer"
  }
  ```
- 状态码 :
  - 200: 登录成功
  - 401: 用户名或密码错误
  - 500: 服务器内部错误
### 3. 获取当前用户信息
- URL : GET /api/v1/auth/me
- 方法 : GET
- 请求头 : Authorization: Bearer {access_token}
- 响应 :
  ```
  {
    "id": 1,
    "username": "string",
    "email": "string",
    "is_active": true,
    "is_admin": false,
    "created_at": "2023-01-01T00:00:00",
    "last_login": "2023-01-02T00:00:00"
  }
  ```
- 状态码 :
  - 200: 请求成功
  - 401: 无效或过期的令牌
  - 404: 用户不存在
  - 500: 服务器内部错误
## 设备管理接口
### 1. 获取所有设备列表
- URL : GET /api/v1/devices/
- 方法 : GET
- 响应 : 设备对象数组
  ```
  [
    {
      "id": 1,
      "name": "string",
      "management_ip": "string",
      "vendor": "string",
      "model": "string",
      "os_version": "string",
      "serial_number": "string",
      "username": "string",
      "port": 22,
      "device_type": "string",
      "location": "string",
      "status": "unknown",
      "created_at": "2023-01-01T00:00:00",
      "updated_at": "2023-01-02T00:00:00"
    }
  ]
  ```
- 状态码 :
  - 200: 请求成功
  - 500: 服务器内部错误
### 2. 获取指定设备信息
- URL : GET /api/v1/devices/{device_id}
- 方法 : GET
- 路径参数 : device_id: integer (设备ID)
- 响应 : 设备对象
  ```
  {
    "id": 1,
    "name": "string",
    "management_ip": "string",
    "vendor": "string",
    "model": "string",
    "os_version": "string",
    "serial_number": "string",
    "username": "string",
    "port": 22,
    "device_type": "string",
    "location": "string",
    "status": "unknown",
    "created_at": "2023-01-01T00:00:00",
    "updated_at": "2023-01-02T00:00:00"
  }
  ```
- 状态码 :
  - 200: 请求成功
  - 404: 设备未找到
  - 500: 服务器内部错误
### 3. 添加新设备
- URL : POST /api/v1/devices/
- 方法 : POST
- 请求体 :
  ```
  {
    "name": "string",
    "management_ip": "string",
    "vendor": "string",
    "model": "string",
    "os_version": "string",
    "serial_number": "string",
    "username": "string",
    "password": "string",
    "enable_password": "string",
    "port": 22,
    "device_type": "string",
    "location": "string",
    "status": "unknown"
  }
  ```
- 响应 : 创建的设备对象
- 状态码 :
  - 201: 创建成功
  - 400: 不支持的厂商或IP地址已存在
  - 500: 服务器内部错误
### 4. 更新设备信息
- URL : PUT /api/v1/devices/{device_id}
- 方法 : PUT
- 路径参数 : device_id: integer (设备ID)
- 请求体 : 可选字段的设备对象
- 响应 : 更新后的设备对象
- 状态码 :
  - 200: 更新成功
  - 404: 设备未找到
  - 400: 不支持的厂商或IP地址已被其他设备使用
  - 500: 服务器内部错误
### 5. 删除设备
- URL : DELETE /api/v1/devices/{device_id}
- 方法 : DELETE
- 路径参数 : device_id: integer (设备ID)
- 响应 : 无
- 状态码 :
  - 204: 删除成功
  - 404: 设备未找到
  - 500: 服务器内部错误
### 6. 获取设备详细信息（通过适配器）
- URL : GET /api/v1/devices/{device_id}/info
- 方法 : GET
- 路径参数 : device_id: integer (设备ID)
- 响应 : 设备详细信息（根据厂商不同返回格式可能不同）
- 状态码 :
  - 200: 请求成功
  - 404: 设备未找到
  - 500: 获取设备信息失败
### 7. 获取设备所有接口信息
- URL : GET /api/v1/devices/{device_id}/interfaces
- 方法 : GET
- 路径参数 : device_id: integer (设备ID)
- 响应 :
  ```
  {
    "interfaces": [
      {"interface_name": "GigabitEthernet0/
      0/1", "status": "up", ...}, 
      ...
    ]
  }
  ```
- 状态码 :
  - 200: 请求成功
  - 404: 设备未找到
  - 500: 获取接口信息失败
### 8. 获取指定接口状态
- URL : GET /api/v1/devices/{device_id}/interface/{interface_name}
- 方法 : GET
- 路径参数 :
  - device_id: integer (设备ID)
  - interface_name: string (接口名称)
- 响应 : 接口状态信息
- 状态码 :
  - 200: 请求成功
  - 404: 设备未找到
  - 500: 获取接口状态失败
### 9. 获取设备配置
- URL : GET /api/v1/devices/{device_id}/config
- 方法 : GET
- 路径参数 : device_id: integer (设备ID)
- 响应 :
  ```
  {
    "config": "string" // 设备配置文本
  }
  ```
- 状态码 :
  - 200: 请求成功
  - 404: 设备未找到
  - 500: 获取设备配置失败
### 10. 保存设备配置
- URL : POST /api/v1/devices/{device_id}/save-config
- 方法 : POST
- 路径参数 : device_id: integer (设备ID)
- 请求头 : Authorization: Bearer {access_token}
- 响应 :
  ```
  {
    "msg": "配置保存成功"
  }
  ```
- 状态码 :
  - 200: 保存成功
  - 401: 无效的令牌
  - 404: 设备未找到
  - 500: 保存配置失败
### 11. 执行设备命令
- URL : POST /api/v1/devices/{device_id}/execute
- 方法 : POST
- 路径参数 : device_id: integer (设备ID)
- 请求头 : Authorization: Bearer {access_token}
- 请求体 :
  ```
  {
    "command": "string" // 要执行的命令
  }
  ```
- 响应 :
  ```
  {
    "command": "string",
    "output": "string",
    "success": true,
    "executed_at": "2023-01-01T00:00:00"
  }
  ```
- 状态码 :
  - 200: 执行成功
  - 401: 无效的令牌
  - 404: 设备未找到
  - 500: 命令执行失败
## 数据模型定义
### 认证相关模型
- Token
  - access_token: string - JWT访问令牌
  - token_type: string - 令牌类型，通常为"bearer"
### 用户相关模型
- UserCreate
  - username: string - 用户名
  - email: EmailStr - 邮箱地址
  - password: string - 密码
  - is_active: boolean (可选) - 用户是否激活
  - is_admin: boolean (可选) - 是否为管理员
- UserResponse
  - id: integer - 用户ID
  - username: string - 用户名
  - email: EmailStr - 邮箱地址
  - is_active: boolean - 用户是否激活
  - is_admin: boolean - 是否为管理员
  - created_at: datetime (可选) - 创建时间
  - last_login: datetime (可选) - 上次登录时间
### 设备相关模型
- DeviceCreate
  - name: string (可选) - 设备名称
  - management_ip: string - 管理IP地址
  - vendor: string - 厂商（华为、H3C、锐捷等）
  - model: string (可选) - 设备型号
  - os_version: string (可选) - 操作系统版本
  - serial_number: string (可选) - 序列号
  - username: string - 登录用户名
  - password: string - 登录密码
  - enable_password: string (可选) - Enable密码
  - port: integer (可选，默认22) - SSH端口
  - device_type: string (可选) - 设备类型
  - location: string (可选) - 设备位置
  - status: string (可选，默认"unknown") - 设备状态
- DeviceUpdate
  - 与DeviceCreate相同，但所有字段均为可选
- DeviceOut
  - 包含DeviceCreate的所有字段
  - id: integer - 设备ID
  - created_at: datetime (可选) - 创建时间
  - updated_at: datetime (可选) - 更新时间
### 命令执行模型
- CommandRequest
  - command: string - 要执行的命令
- CommandResponse
  - command: string - 执行的命令
  - output: string - 命令输出结果
  - success: boolean - 执行是否成功
  - executed_at: datetime - 执行时间
## 接口访问说明
1. 1.
   API根地址: 开发环境为 http://127.0.0.1:8000
2. 2.
   交互式文档: 可通过 http://127.0.0.1:8000/docs 访问Swagger UI进行接口测试
3. 3.
   认证方式: 使用Bearer令牌，在登录成功后获取并在后续请求的Authorization头中使用
4. 4.
   错误处理: 所有接口均返回标准HTTP状态码和详细错误信息
5. 5.
   支持的厂商: 华为、H3C、锐捷
## 健康检查接口
- URL : GET /ping
- 方法 : GET
- 响应 :
  ```
  {
    "msg": "pong"
  }
  ```
- 用途 : 用于检查API服务是否正常运行